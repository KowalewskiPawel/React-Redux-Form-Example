{"version":3,"sources":["ReduxStore/store.js","utils/durationNormalizer.js","utils/numbersNormalizer.js","components/DishForm.jsx","App.js","index.js"],"names":["reducer","combineReducers","form","reduxFormReducer","store","window","devToolsExtension","createStore","durationNormalizer","value","onlyNums","replace","length","slice","numbersNormalizer","type","Number","DishForm","props","handleSubmit","dishType","onSubmit","htmlFor","Field","name","component","required","normalize","reduxForm","initialValues","preparation_time","selector","formValueSelector","connect","state","App","useState","responseFromApi","setResponseFromApi","dataSender","data","a","fetch","process","method","headers","body","JSON","stringify","response","json","className","then","res","catch","err","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5579a182.chunk.js","sourcesContent":["import { createStore, combineReducers } from \"redux\";\nimport { reducer as reduxFormReducer } from \"redux-form\";\n\nconst reducer = combineReducers({\n  form: reduxFormReducer, // mounted under \"form\"\n});\nconst store = (\n  window.devToolsExtension\n    ? window.devToolsExtension()(createStore)\n    : createStore\n)(reducer);\n\nexport default store;\n","const durationNormalizer = (value) => {\n  if (!value) {\n    return value;\n  }\n\n  const onlyNums = value.replace(/[^\\d]/g, \"\");\n\n  if (onlyNums.length <= 2) {\n    return onlyNums;\n  }\n  if (onlyNums.length <= 5) {\n    return `${onlyNums.slice(0, 2)}:${onlyNums.slice(2)}`;\n  }\n  return `${onlyNums.slice(0, 2)}:${onlyNums.slice(2, 4)}:${onlyNums.slice(\n    4,\n    6\n  )}`;\n};\n\nexport default durationNormalizer;\n","const numbersNormalizer = (value, type = null) => {\n  if (!value) {\n    return;\n  }\n\n  const onlyNums = value.replace(/[^\\d]/g, \"\");\n\n  if (type === \"spiciness\") {\n    return Number(onlyNums) > 10 ? 10 : Number(onlyNums.slice(0, 2));\n  }\n\n  if (type === \"diameter\" && onlyNums.length > 2) {\n    return Number(`${onlyNums.slice(0, 2)}.${onlyNums.slice(2)}`);\n  }\n\n  return Number(onlyNums);\n};\n\nexport default numbersNormalizer;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, formValueSelector, reduxForm } from \"redux-form\";\n\nimport durationNormalizer from \"../utils/durationNormalizer\";\nimport numbersNormalizer from \"../utils/numbersNormalizer\";\n\nlet DishForm = (props) => {\n  const { handleSubmit, dishType } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor='name'>Dish Name</label>\n        <Field name='name' component='input' type='text' required />\n      </div>\n      <div>\n        <label htmlFor='preparation_time'>Preparation Time (hh:mm:ss)</label>\n        <Field\n          name='preparation_time'\n          component='input'\n          type='text'\n          normalize={durationNormalizer}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor='type'>Type</label>\n        <Field name='type' component='select' required>\n          <option value=''>Please choose the type</option>\n          <option value='pizza'>Pizza</option>\n          <option value='soup'>Soup</option>\n          <option value='sandwich'>Sandwich</option>\n        </Field>\n      </div>\n      {dishType === \"pizza\" && (\n        <div>\n          <label htmlFor='no_of_slices'>Number of Slices: </label>\n          <Field\n            name='no_of_slices'\n            component='input'\n            type='text'\n            normalize={numbersNormalizer}\n            required\n          />\n          <label htmlFor='Diameter'>Diameter: </label>\n          <Field\n            name='diameter'\n            component='input'\n            type='text'\n            normalize={(value) => numbersNormalizer(value, \"diameter\")}\n            required\n          />\n        </div>\n      )}\n      {dishType === \"soup\" && (\n        <div>\n          <label htmlFor='spiciness_scale'>Spiciness scale(1-10): </label>\n          <Field\n            name='spiciness_scale'\n            component='input'\n            type='text'\n            normalize={(value) => numbersNormalizer(value, \"spiciness\")}\n            required\n          />\n        </div>\n      )}\n      {dishType === \"sandwich\" && (\n        <div>\n          <label htmlFor='slices_of_bread'>\n            Number of Bread Slices Required:{\" \"}\n          </label>\n          <Field\n            name='slices_of_bread'\n            component='input'\n            type='text'\n            normalize={numbersNormalizer}\n            required\n          />\n        </div>\n      )}\n      <button type='submit'>Submit</button>\n    </form>\n  );\n};\n\nDishForm = reduxForm({\n  form: \"dish\",\n  initialValues: { preparation_time: \"00:00:00\" },\n})(DishForm);\n\nconst selector = formValueSelector(\"dish\");\n\nDishForm = connect((state) => {\n  const dishType = selector(state, \"type\");\n  return {\n    dishType,\n  };\n})(DishForm);\n\nexport default DishForm;\n","import { useState } from \"react\";\nimport DishForm from \"./components/DishForm\";\nimport \"./styles/app.css\";\n\nfunction App() {\n  const [responseFromApi, setResponseFromApi] = useState(\n    \"Response from the API will be visible here\"\n  );\n\n  const dataSender = async (data) => {\n    const response = await fetch(process.env.REACT_APP_API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    return response.json();\n  };\n\n  const postData = (data) => {\n    setResponseFromApi(\"loading\");\n    dataSender(data)\n      .then((res) => setResponseFromApi(JSON.stringify(res)))\n      .catch((err) => setResponseFromApi(JSON.stringify(err)));\n  };\n\n  return (\n    <div className='content'>\n      <h3>HexOcean Form Task</h3>\n      <DishForm onSubmit={postData} />\n      <section>\n        <h4>Result:</h4>\n        <p>{responseFromApi === \"loading\" ? \"Loading\" : responseFromApi}</p>\n      </section>\n      <footer>\n        <span>\n          Made by{\" \"}\n          <a href='https://github.com/KowalewskiPawel'>Pawel Kowalewski</a>\n        </span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./ReduxStore/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}